{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv(\"C:/Users/divanand/Desktop/bigmarket.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Meat</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Household</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "0           FDA15         9.30          Low Fat         0.016047   \n",
       "1           DRC01         5.92          Regular         0.019278   \n",
       "2           FDN15        17.50          Low Fat         0.016760   \n",
       "3           FDX07        19.20          Regular         0.000000   \n",
       "4           NCD19         8.93          Low Fat         0.000000   \n",
       "\n",
       "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
       "0                  Dairy  249.8092            OUT049   \n",
       "1            Soft Drinks   48.2692            OUT018   \n",
       "2                   Meat  141.6180            OUT049   \n",
       "3  Fruits and Vegetables  182.0950            OUT010   \n",
       "4              Household   53.8614            OUT013   \n",
       "\n",
       "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
       "0                       1999      Medium               Tier 1   \n",
       "1                       2009      Medium               Tier 3   \n",
       "2                       1999      Medium               Tier 1   \n",
       "3                       1998         NaN               Tier 3   \n",
       "4                       1987        High               Tier 3   \n",
       "\n",
       "         Outlet_Type  Item_Outlet_Sales  \n",
       "0  Supermarket Type1          3735.1380  \n",
       "1  Supermarket Type2           443.4228  \n",
       "2  Supermarket Type1          2097.2700  \n",
       "3      Grocery Store           732.3800  \n",
       "4  Supermarket Type1           994.7052  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Here is the descrpition of  of Big_Mart  dataset\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>12.170000</td>\n",
       "      <td>0.010417</td>\n",
       "      <td>135.130560</td>\n",
       "      <td>1998.400000</td>\n",
       "      <td>1600.583200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>5.822946</td>\n",
       "      <td>0.009585</td>\n",
       "      <td>85.948398</td>\n",
       "      <td>7.797435</td>\n",
       "      <td>1347.489064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>5.920000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>48.269200</td>\n",
       "      <td>1987.000000</td>\n",
       "      <td>443.422800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>8.930000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>53.861400</td>\n",
       "      <td>1998.000000</td>\n",
       "      <td>732.380000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>9.300000</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>141.618000</td>\n",
       "      <td>1999.000000</td>\n",
       "      <td>994.705200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>17.500000</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>182.095000</td>\n",
       "      <td>1999.000000</td>\n",
       "      <td>2097.270000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>19.200000</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>249.809200</td>\n",
       "      <td>2009.000000</td>\n",
       "      <td>3735.138000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Item_Weight  Item_Visibility    Item_MRP  Outlet_Establishment_Year  \\\n",
       "count     5.000000         5.000000    5.000000                   5.000000   \n",
       "mean     12.170000         0.010417  135.130560                1998.400000   \n",
       "std       5.822946         0.009585   85.948398                   7.797435   \n",
       "min       5.920000         0.000000   48.269200                1987.000000   \n",
       "25%       8.930000         0.000000   53.861400                1998.000000   \n",
       "50%       9.300000         0.016047  141.618000                1999.000000   \n",
       "75%      17.500000         0.016760  182.095000                1999.000000   \n",
       "max      19.200000         0.019278  249.809200                2009.000000   \n",
       "\n",
       "       Item_Outlet_Sales  \n",
       "count           5.000000  \n",
       "mean         1600.583200  \n",
       "std          1347.489064  \n",
       "min           443.422800  \n",
       "25%           732.380000  \n",
       "50%           994.705200  \n",
       "75%          2097.270000  \n",
       "max          3735.138000  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Here is the descrpition of  of Big_Mart  dataset\")\n",
    "data.describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Here is the shape of dataset\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(5, 12)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Here is the shape of dataset\")\n",
    "data.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of the dataset\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "60"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Size of the dataset\")\n",
    "data.size\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Look on the last 5 rows of data  using tail function\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Meat</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Household</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "0           FDA15         9.30          Low Fat         0.016047   \n",
       "1           DRC01         5.92          Regular         0.019278   \n",
       "2           FDN15        17.50          Low Fat         0.016760   \n",
       "3           FDX07        19.20          Regular         0.000000   \n",
       "4           NCD19         8.93          Low Fat         0.000000   \n",
       "\n",
       "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
       "0                  Dairy  249.8092            OUT049   \n",
       "1            Soft Drinks   48.2692            OUT018   \n",
       "2                   Meat  141.6180            OUT049   \n",
       "3  Fruits and Vegetables  182.0950            OUT010   \n",
       "4              Household   53.8614            OUT013   \n",
       "\n",
       "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
       "0                       1999      Medium               Tier 1   \n",
       "1                       2009      Medium               Tier 3   \n",
       "2                       1999      Medium               Tier 1   \n",
       "3                       1998         NaN               Tier 3   \n",
       "4                       1987        High               Tier 3   \n",
       "\n",
       "         Outlet_Type  Item_Outlet_Sales  \n",
       "0  Supermarket Type1          3735.1380  \n",
       "1  Supermarket Type2           443.4228  \n",
       "2  Supermarket Type1          2097.2700  \n",
       "3      Grocery Store           732.3800  \n",
       "4  Supermarket Type1           994.7052  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\" Look on the last 5 rows of data  using tail function\")\n",
    "data.tail()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Sum of null values  in each column\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Item_Identifier              0\n",
       "Item_Weight                  0\n",
       "Item_Fat_Content             0\n",
       "Item_Visibility              0\n",
       "Item_Type                    0\n",
       "Item_MRP                     0\n",
       "Outlet_Identifier            0\n",
       "Outlet_Establishment_Year    0\n",
       "Outlet_Size                  1\n",
       "Outlet_Location_Type         0\n",
       "Outlet_Type                  0\n",
       "Item_Outlet_Sales            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\" Sum of null values  in each column\")\n",
    "data.isnull().sum()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "data[\"Item_Fat_Content\"]=data[\"Item_Fat_Content\"].replace({'low fat':'Low Fat','reg':'Regular','LF':'Low Fat'})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'data' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-25-5f53ebff9c10>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mscipy\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstats\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mmode\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mdata\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfillna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mOutlet_size_mode\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpivot_table\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Outlet_Size'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Outlet_Type'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0maggfunc\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m:\u001b[0m\u001b[0mmode\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0matype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'str'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'data' is not defined"
     ]
    }
   ],
   "source": [
    "from scipy.stats import mode\n",
    "\n",
    "data=data.fillna(data.mean())\n",
    "\n",
    "Outlet_size_mode=data.pivot_table(values=['Outlet_Size'],columns=['Outlet_Type'],aggfunc=lambda x:mode(x.atype('str')).mode[0])\n",
    "Outlet_size_mode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    Medium\n",
      "dtype: object 0    Medium\n",
      "dtype: object Series([], dtype: object) Series([], dtype: object)\n"
     ]
    }
   ],
   "source": [
    "data['Outlet_size']=np.where(((data['Outlet_Size'].isnull())& (data['Outlet_Type']==\"Grocery Store\")),\\\n",
    "                            \"Small\",data['Outlet_Size'])\n",
    "a=data[data[\"Outlet_Type\"]==\"Supermarket Type1\"][\"Outlet_Size\"].mode()\n",
    "b=data[data[\"Outlet_Type\"]==\"Supermarket Type2\"][\"Outlet_Size\"].mode()\n",
    "c=data[data[\"Outlet_Type\"]==\"Grocery Store\"][\"Outlet_Size\"].mode()\n",
    "d=data[data[\"Outlet_Type\"]==\"Supermarket Type3\"][\"Outlet_Size\"].mode()\n",
    "print(a,b,c,d)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Outlet_Size'] = np.where(((data['Outlet_Size'].isnull()) &\n",
    "                               (data['Outlet_Type']==\"Supermarket Type2\")),\\\n",
    "                               \"Medium\",data['Outlet_Size'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Outlet_Size'] = np.where(((data['Outlet_Size'].isnull()) &\n",
    "                               (data['Outlet_Type']==\"Supermarket Type1\")),\\\n",
    "                               \"Medium\",data['Outlet_Size'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Item_Identifier              0\n",
      "Item_Weight                  0\n",
      "Item_Fat_Content             0\n",
      "Item_Visibility              0\n",
      "Item_Type                    0\n",
      "Item_MRP                     0\n",
      "Outlet_Identifier            0\n",
      "Outlet_Establishment_Year    0\n",
      "Outlet_Size                  1\n",
      "Outlet_Location_Type         0\n",
      "Outlet_Type                  0\n",
      "Item_Outlet_Sales            0\n",
      "Outlet_size                  0\n",
      "dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "      <th>Outlet_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Meat</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "      <td>Small</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Household</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "0           FDA15         9.30          Low Fat         0.016047   \n",
       "1           DRC01         5.92          Regular         0.019278   \n",
       "2           FDN15        17.50          Low Fat         0.016760   \n",
       "3           FDX07        19.20          Regular         0.000000   \n",
       "4           NCD19         8.93          Low Fat         0.000000   \n",
       "\n",
       "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
       "0                  Dairy  249.8092            OUT049   \n",
       "1            Soft Drinks   48.2692            OUT018   \n",
       "2                   Meat  141.6180            OUT049   \n",
       "3  Fruits and Vegetables  182.0950            OUT010   \n",
       "4              Household   53.8614            OUT013   \n",
       "\n",
       "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
       "0                       1999      Medium               Tier 1   \n",
       "1                       2009      Medium               Tier 3   \n",
       "2                       1999      Medium               Tier 1   \n",
       "3                       1998         NaN               Tier 3   \n",
       "4                       1987        High               Tier 3   \n",
       "\n",
       "         Outlet_Type  Item_Outlet_Sales Outlet_size  \n",
       "0  Supermarket Type1          3735.1380      Medium  \n",
       "1  Supermarket Type2           443.4228      Medium  \n",
       "2  Supermarket Type1          2097.2700      Medium  \n",
       "3      Grocery Store           732.3800       Small  \n",
       "4  Supermarket Type1           994.7052        High  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(data.isnull().sum())\n",
    "\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2d7d1177c18>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=data,x=\"Outlet_Size\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2d7d1028748>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=data,x=\"Outlet_Identifier\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2d7d2685160>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=data,x=\"Item_Fat_Content\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2d7d26ba4a8>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=data,y=\"Outlet_Type\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2d7d26795f8>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=data,y=\"Outlet_Location_Type\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0., 0., 0., 0., 0., 1., 0., 0., 0., 0.]),\n",
       " array([-0.5, -0.4, -0.3, -0.2, -0.1,  0. ,  0.1,  0.2,  0.3,  0.4,  0.5]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(data=data,x=\"Outlet_Establishement_Type\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2d7d27ca860>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWQAAAELCAYAAADuufyvAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAADGZJREFUeJzt3X2MZXddx/HPl13FVkEsrU2zINuyVmNQoVkIiZZANEgbBXwMSrSJRsTgZltjIgZjiIkJSNTUjRFRiWh4slEUEww1BpU/5GG39glaYECQLqUtbdJWuxbb/vzjnklm172zu2XuuV/Z1yuZzJ0zJ3u+e+6Z9557ZudMjTECwPo9Yd0DALAgyABNCDJAE4IM0IQgAzQhyABNCDJAE4IM0IQgAzSx+0xWPv/888fevXtXNArAV6cjR458aYxxwanWO6Mg7927N4cPH378UwGcharqc6eznksWAE0IMkATggzQhCADNCHIAE0IMkATggzQhCADNCHIAE0IMkATggzQhCADNCHIAE0IMkATggzQhCADNCHIAE0IMkATggzQxBn9Tr1VOXToUDY2NtY9Bo0cPXo0SbJnz541TzKvffv25cCBA+segzVpEeSNjY3ceOttefTc89Y9Ck3seuj+JMkXH25xiM5i10P3rXsE1qzN0f7ouefl2Ldfue4xaOKc29+XJGfVMbH5d+bs5RoyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOzBPnQoUM5dOjQHJsC2FFz9mv3HBvZ2NiYYzMAO27OfrlkAdCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNDE7jk2cvTo0Rw7diwHDx486ec3NjbyhC+POUaBtp7w3w9kY+PBpV8nrMfGxkbOOeecWbZ1yjPkqnpVVR2uqsP33HPPHDMBnJVOeYY8xnhLkrckyf79+x/XaeyePXuSJNdee+1JP3/w4MEc+cxdj+ePhq8aj33dk7PvkguXfp2wHnO+YnENGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoYvccG9m3b98cmwHYcXP2a5YgHzhwYI7NAOy4OfvlkgVAE4IM0IQgAzQhyABNCDJAE4IM0IQgAzQhyABNCDJAE4IM0IQgAzQhyABNCDJAE4IM0IQgAzQhyABNCDJAE4IM0IQgAzQhyABNCDJAE4IM0IQgAzQhyABNCDJAE4IM0IQgAzQhyABNCDJAE4IM0IQgAzQhyABNCDJAE4IM0IQgAzQhyABNCDJAE4IM0IQgAzQhyABN7F73AJt2PXRfzrn9fesegyZ2PXRvkpxVx8Suh+5LcuG6x2CNWgR537596x6BZo4efSRJsmfP2RSoC30tnOVaBPnAgQPrHgFg7VxDBmhCkAGaEGSAJgQZoAlBBmhCkAGaEGSAJgQZoAlBBmhCkAGaEGSAJgQZoAlBBmhCkAGaEGSAJgQZoAlBBmhCkAGaEGSAJgQZoIkaY5z+ylX3JPncDmz3/CRf2oE/Zyd1nCkx15nqOFfHmRJznamvZK5njDEuONVKZxTknVJVh8cY+2ff8DY6zpSY60x1nKvjTIm5ztQcc7lkAdCEIAM0sa4gv2VN291Ox5kSc52pjnN1nCkx15la+VxruYYMwP/lkgVAEysPclV9tqpuqaobq+rwtOy8qvqHqvrU9P6bVj3HCTN92zTP5tsDVXV1Vb2+qo5uWX7lDLO8tarurqpbtyw76f6phd+vqo2qurmqLptxpjdV1e3Tdt9TVU+Zlu+tqmNb9tmbVzHTNnMtfc6q6temffWJqvqBmed695aZPltVN07LZ9lfVfX0qvpAVd1WVR+rqoPT8nUfW8vmWuvxtc1c8x5fY4yVviX5bJLzT1j220leOz1+bZI3rnqObebbleSLSZ6R5PVJfmXm7b8gyWVJbj3V/klyZZK/T1JJnp/kwzPO9OIku6fHb9wy096t661hX530OUvyHUluSvLEJBcn+XSSXXPNdcLnfyfJb8y5v5JclOSy6fGTknxy2ifrPraWzbXW42ubuWY9vtZ1yeJlSd42PX5bkpevaY4k+b4knx5j7MQPvJyxMca/JLnvhMXL9s/Lkvz5WPhQkqdU1UVzzDTGuH6M8cj04YeSPG2nt/t45trGy5K8a4zx8Bjj35NsJHne3HNVVSX5iSTvXMW2t5npzjHGDdPjB5PclmRP1n9snXSudR9f2+yvZVZyfM0R5JHk+qo6UlWvmpZdOMa4M1nsiCTfPMMcy7wix3+x/NL0sumtc19K2WLZ/tmT5PNb1rsj2x80q/KzWZxNbbq4qv6tqv65qi5fwzwne8667KvLk9w1xvjUlmWz7q+q2pvkOUk+nEbH1glzbbXW4+skc812fM0R5O8ZY1yW5Iokr6mqF8ywzdNSVV+b5KVJrpsW/WGSZyZ5dpI7s3ip2UmdZNms/02mql6X5JEkb58W3ZnkW8YYz0nyy0neUVVPnnGkZc/Z2vfV5Cdz/D/4s+6vqvqGJH+V5OoxxgPbrXqSZSvbX8vmWvfxdZK5Zj2+Vh7kMcYXpvd3J3lPFqf1d22+HJre373qOZa4IskNY4y7phnvGmM8OsZ4LMkfZ0UvcU/Dsv1zR5Knb1nvaUm+MNdQVXVVkh9M8soxXUibXrLdOz0+ksW1tEvnmmmb52yt+ypJqmp3kh9J8u7NZXPur6r6mizi8vYxxl9Pi9d+bC2Za+3H18nmmvv4WmmQq+rrq+pJm4+zuHB/a5L3JrlqWu2qJH+7yjm2cdzZywnXzH44i1nXYdn+eW+Sn5m+I/78JPdvvvxctap6SZJfTfLSMcZDW5ZfUFW7pseXJPnWJJ+ZY6Zpm8ues/cmeUVVPbGqLp7m+shcc02+P8ntY4w7NhfMtb+ma9d/muS2McbvbvnUWo+tZXOt+/jaZq55j68Vf+fykiy+E3lTko8led20/KlJ/jHJp6b3561yjiWznZvk3iTfuGXZXyS5JcnN0w6/aIY53pnFS6H/yeJf3Z9btn+yeJn0B1mcJdySZP+MM21kcc3sxuntzdO6Pzo9tzcluSHJD828r5Y+Z0leN+2rTyS5Ys65puV/luTVJ6w7y/5K8r1ZvIS+ectzdmWDY2vZXGs9vraZa9bjy0/qATThJ/UAmhBkgCYEGaAJQQZoQpABmhBkgCYEmdlU1X9O7/dW1U+teFuvr6pRVfu2LLtmWrZ/+njz1rA3T/dJeMaWdR+dbrd4a1VdV1XnrnJeSASZ9dibZKVBntySxc2jNv1Yko+fsM6LxhjfleSfkvz6luXHxhjPHmM8K8mXk7x6lYNCIsisxxuSXD6dgV5TVbtqcYPyj05nq7+QJFX1wunM9S+r6pNV9YaqemVVfWQ6s33mKbbzN1ncJnHzx27vT3LPknX/Ncvv1vXBJPuWfA52jCCzDq9N8sHpDPT3svgR6PvHGM9N8twkPz/dHyBJvjvJwSTfmeSnk1w6xnhekj9JcuAU23kgyeer6llZ3Lfk3dus+5IsAn6c6QZBV2Rxtg0rJch08OIsbmxzYxb3oH1qFjdrSZKPjsXNwx/O4r4B10/Lb8ni0sepvCuLyxYvz+Jugyf6QFXdncWNgN6xZfk50zyHk/xHFjeegZXave4BIIsb2xwYY7z/uIVVL0zy8JZFj235+LGc3vH7d0nelOTwGOOBxU29jvOiJP+VxY2AfjOLe+4m0zXk0/8rwFfOGTLr8GAWv7ds0/uT/OJ0P9pU1aXT7Vq/YmOMY1nc1vG3TrHO1VmcpZ+3E9uFx0OQWYebkzxSVTdV1TVZXA/+eJIbavGbm/8oO/jqbYzxrjH9vrRt1rkzi9tovmantgtnyu03AZpwhgzQhG/q8f/a9Esxf/yExdeNMZZeM4auXLIAaMIlC4AmBBmgCUEGaEKQAZoQZIAm/hd+lJELrxfqSAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(data=data,x=\"Item_MRP\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,\n",
       "        0., 0., 0., 0., 0., 1.]),\n",
       " array([ 48.2692,  53.3077,  58.3462,  63.3847,  68.4232,  73.4617,\n",
       "         78.5002,  83.5387,  88.5772,  93.6157,  98.6542, 103.6927,\n",
       "        108.7312, 113.7697, 118.8082, 123.8467, 128.8852, 133.9237,\n",
       "        138.9622, 144.0007, 149.0392, 154.0777, 159.1162, 164.1547,\n",
       "        169.1932, 174.2317, 179.2702, 184.3087, 189.3472, 194.3857,\n",
       "        199.4242, 204.4627, 209.5012, 214.5397, 219.5782, 224.6167,\n",
       "        229.6552, 234.6937, 239.7322, 244.7707, 249.8092]),\n",
       " <a list of 40 Patch objects>)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(data=data,x=\"Item_MRP\",bins=40)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2d7d28e0fd0>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x1440 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,20))\n",
    "sns.heatmap(data.corr(),vmin=-1,vmax=1,annot=True,square=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(data=data,y=\"Item_Outlet_Sales\",x=\"Item_MRP\",y_jitter=0.2,scatter_kws={'alpha':0.1})\n",
    "sns.despine()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(data=data,y=\"Outlet_Establishment_Year\",x=\"Item_MRP\",y_jitter=0.4,scatter_kws={\"alpha\":0.2})\n",
    "sns.despine()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(data=data,y=\"Item_Outlet_Sales\",x=\"Outlet_Establishment_Year\",x_jitter=0.2,scatter_kws={\"alpha\":0.3})\n",
    "sns.despine()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\divanand\\Anaconda3\\lib\\site-packages\\matplotlib\\axes\\_axes.py:6462: UserWarning: The 'normed' kwarg is deprecated, and has been replaced by the 'density' kwarg.\n",
      "  warnings.warn(\"The 'normed' kwarg is deprecated, and has been \"\n",
      "C:\\Users\\divanand\\Anaconda3\\lib\\site-packages\\matplotlib\\axes\\_axes.py:6462: UserWarning: The 'normed' kwarg is deprecated, and has been replaced by the 'density' kwarg.\n",
      "  warnings.warn(\"The 'normed' kwarg is deprecated, and has been \"\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.JointGrid at 0x2d7d281fcf8>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.jointplot(data=data,y=\"Item_Outlet_Sales\",x=\"Outlet_Establishment_Year\",kind=\"hex\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Grocery Store</th>\n",
       "      <td>732.3800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Supermarket Type1</th>\n",
       "      <td>2275.7044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Supermarket Type2</th>\n",
       "      <td>443.4228</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Item_Outlet_Sales\n",
       "Outlet_Type                         \n",
       "Grocery Store               732.3800\n",
       "Supermarket Type1          2275.7044\n",
       "Supermarket Type2           443.4228"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.pivot_table(values=\"Item_Outlet_Sales\",index=\"Outlet_Type\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Visibility</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>DRC01</th>\n",
       "      <td>0.019278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FDA15</th>\n",
       "      <td>0.016047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FDN15</th>\n",
       "      <td>0.016760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FDX07</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NCD19</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Item_Visibility\n",
       "Item_Identifier                 \n",
       "DRC01                   0.019278\n",
       "FDA15                   0.016047\n",
       "FDN15                   0.016760\n",
       "FDX07                   0.000000\n",
       "NCD19                   0.000000"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg_vis=data.pivot_table(values=\"Item_Visibility\",index=\"Item_Identifier\")\n",
    "avg_vis\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0104171184"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg = data['Item_Visibility'].mean()\n",
    "avg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Item_Visibility'] = data['Item_Visibility'].replace(0,avg)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "      <th>Outlet_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Meat</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "      <td>Small</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Household</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "0           FDA15         9.30          Low Fat         0.016047   \n",
       "1           DRC01         5.92          Regular         0.019278   \n",
       "2           FDN15        17.50          Low Fat         0.016760   \n",
       "3           FDX07        19.20          Regular         0.000000   \n",
       "4           NCD19         8.93          Low Fat         0.000000   \n",
       "\n",
       "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
       "0                  Dairy  249.8092            OUT049   \n",
       "1            Soft Drinks   48.2692            OUT018   \n",
       "2                   Meat  141.6180            OUT049   \n",
       "3  Fruits and Vegetables  182.0950            OUT010   \n",
       "4              Household   53.8614            OUT013   \n",
       "\n",
       "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
       "0                       1999      Medium               Tier 1   \n",
       "1                       2009      Medium               Tier 3   \n",
       "2                       1999      Medium               Tier 1   \n",
       "3                       1998         NaN               Tier 3   \n",
       "4                       1987        High               Tier 3   \n",
       "\n",
       "         Outlet_Type  Item_Outlet_Sales Outlet_size  \n",
       "0  Supermarket Type1          3735.1380      Medium  \n",
       "1  Supermarket Type2           443.4228      Medium  \n",
       "2  Supermarket Type1          2097.2700      Medium  \n",
       "3      Grocery Store           732.3800       Small  \n",
       "4  Supermarket Type1           994.7052        High  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Food              3\n",
       "Non-Consumable    1\n",
       "Drinks            1\n",
       "Name: Item_Type, dtype: int64"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Item_Type'] = data['Item_Identifier'].apply(lambda x: x[0:2])\n",
    "\n",
    "data['Item_Type'] = data['Item_Type'].map({'FD':'Food',\n",
    "                                                  'NC':'Non-Consumable',\n",
    "                                                  'DR':'Drinks'})\n",
    "data['Item_Type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 13)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "      <th>Outlet_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Food</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Food</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Food</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "      <td>Small</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Non-Consumable</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "0           FDA15         9.30          Low Fat         0.016047   \n",
       "1           DRC01         5.92          Regular         0.019278   \n",
       "2           FDN15        17.50          Low Fat         0.016760   \n",
       "3           FDX07        19.20          Regular         0.000000   \n",
       "4           NCD19         8.93          Low Fat         0.000000   \n",
       "\n",
       "        Item_Type  Item_MRP Outlet_Identifier  Outlet_Establishment_Year  \\\n",
       "0            Food  249.8092            OUT049                       1999   \n",
       "1          Drinks   48.2692            OUT018                       2009   \n",
       "2            Food  141.6180            OUT049                       1999   \n",
       "3            Food  182.0950            OUT010                       1998   \n",
       "4  Non-Consumable   53.8614            OUT013                       1987   \n",
       "\n",
       "  Outlet_Size Outlet_Location_Type        Outlet_Type  Item_Outlet_Sales  \\\n",
       "0      Medium               Tier 1  Supermarket Type1          3735.1380   \n",
       "1      Medium               Tier 3  Supermarket Type2           443.4228   \n",
       "2      Medium               Tier 1  Supermarket Type1          2097.2700   \n",
       "3         NaN               Tier 3      Grocery Store           732.3800   \n",
       "4        High               Tier 3  Supermarket Type1           994.7052   \n",
       "\n",
       "  Outlet_size  \n",
       "0      Medium  \n",
       "1      Medium  \n",
       "2      Medium  \n",
       "3       Small  \n",
       "4        High  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.loc[data['Item_Type']=='Non-Consumable','Item_Fat_Content']='Non Edible'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "      <th>Outlet_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Food</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Food</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Food</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "      <td>Small</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Non-Consumable</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "0           FDA15         9.30          Low Fat         0.016047   \n",
       "1           DRC01         5.92          Regular         0.019278   \n",
       "2           FDN15        17.50          Low Fat         0.016760   \n",
       "3           FDX07        19.20          Regular         0.000000   \n",
       "4           NCD19         8.93          Low Fat         0.000000   \n",
       "\n",
       "        Item_Type  Item_MRP Outlet_Identifier  Outlet_Establishment_Year  \\\n",
       "0            Food  249.8092            OUT049                       1999   \n",
       "1          Drinks   48.2692            OUT018                       2009   \n",
       "2            Food  141.6180            OUT049                       1999   \n",
       "3            Food  182.0950            OUT010                       1998   \n",
       "4  Non-Consumable   53.8614            OUT013                       1987   \n",
       "\n",
       "  Outlet_Size Outlet_Location_Type        Outlet_Type  Item_Outlet_Sales  \\\n",
       "0      Medium               Tier 1  Supermarket Type1          3735.1380   \n",
       "1      Medium               Tier 3  Supermarket Type2           443.4228   \n",
       "2      Medium               Tier 1  Supermarket Type1          2097.2700   \n",
       "3         NaN               Tier 3      Grocery Store           732.3800   \n",
       "4        High               Tier 3  Supermarket Type1           994.7052   \n",
       "\n",
       "  Outlet_size  \n",
       "0      Medium  \n",
       "1      Medium  \n",
       "2      Medium  \n",
       "3       Small  \n",
       "4        High  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     5.000000\n",
       "mean     14.600000\n",
       "std       7.797435\n",
       "min       4.000000\n",
       "25%      14.000000\n",
       "50%      14.000000\n",
       "75%      15.000000\n",
       "max      26.000000\n",
       "Name: Outlet_Years, dtype: float64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Outlet_Years'] = 2013-data['Outlet_Establishment_Year']\n",
    "\n",
    "data['Outlet_Years'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import preprocessing\n",
    "le = preprocessing.LabelEncoder()\n",
    "mod = ['Item_Fat_Content','Outlet_Type','Outlet_Size','Item_Type','Outlet_Location_Type']\n",
    "le = preprocessing.LabelEncoder()\n",
    "for i in mod:\n",
    "    data[i]= le.fit_transform(data[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "      <th>Outlet_size</th>\n",
       "      <th>Outlet_Years</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Food</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "      <td>Medium</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "      <td>Medium</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Food</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "      <td>Medium</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Food</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "      <td>Small</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Non-Consumable</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "      <td>High</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "0           FDA15         9.30          Low Fat         0.016047   \n",
       "1           DRC01         5.92          Regular         0.019278   \n",
       "2           FDN15        17.50          Low Fat         0.016760   \n",
       "3           FDX07        19.20          Regular         0.000000   \n",
       "4           NCD19         8.93          Low Fat         0.000000   \n",
       "\n",
       "        Item_Type  Item_MRP Outlet_Identifier  Outlet_Establishment_Year  \\\n",
       "0            Food  249.8092            OUT049                       1999   \n",
       "1          Drinks   48.2692            OUT018                       2009   \n",
       "2            Food  141.6180            OUT049                       1999   \n",
       "3            Food  182.0950            OUT010                       1998   \n",
       "4  Non-Consumable   53.8614            OUT013                       1987   \n",
       "\n",
       "  Outlet_Size Outlet_Location_Type        Outlet_Type  Item_Outlet_Sales  \\\n",
       "0      Medium               Tier 1  Supermarket Type1          3735.1380   \n",
       "1      Medium               Tier 3  Supermarket Type2           443.4228   \n",
       "2      Medium               Tier 1  Supermarket Type1          2097.2700   \n",
       "3         NaN               Tier 3      Grocery Store           732.3800   \n",
       "4        High               Tier 3  Supermarket Type1           994.7052   \n",
       "\n",
       "  Outlet_size  Outlet_Years  \n",
       "0      Medium            14  \n",
       "1      Medium             4  \n",
       "2      Medium            14  \n",
       "3       Small            15  \n",
       "4        High            26  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "      <th>Outlet_size</th>\n",
       "      <th>Outlet_Years</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Food</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "      <td>Medium</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "      <td>Medium</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Food</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "      <td>Medium</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Food</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "      <td>Small</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Non-Consumable</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "      <td>High</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "0           FDA15         9.30          Low Fat         0.016047   \n",
       "1           DRC01         5.92          Regular         0.019278   \n",
       "2           FDN15        17.50          Low Fat         0.016760   \n",
       "3           FDX07        19.20          Regular         0.000000   \n",
       "4           NCD19         8.93          Low Fat         0.000000   \n",
       "\n",
       "        Item_Type  Item_MRP Outlet_Identifier  Outlet_Establishment_Year  \\\n",
       "0            Food  249.8092            OUT049                       1999   \n",
       "1          Drinks   48.2692            OUT018                       2009   \n",
       "2            Food  141.6180            OUT049                       1999   \n",
       "3            Food  182.0950            OUT010                       1998   \n",
       "4  Non-Consumable   53.8614            OUT013                       1987   \n",
       "\n",
       "  Outlet_Size Outlet_Location_Type        Outlet_Type  Item_Outlet_Sales  \\\n",
       "0      Medium               Tier 1  Supermarket Type1          3735.1380   \n",
       "1      Medium               Tier 3  Supermarket Type2           443.4228   \n",
       "2      Medium               Tier 1  Supermarket Type1          2097.2700   \n",
       "3         NaN               Tier 3      Grocery Store           732.3800   \n",
       "4        High               Tier 3  Supermarket Type1           994.7052   \n",
       "\n",
       "  Outlet_size  Outlet_Years  \n",
       "0      Medium            14  \n",
       "1      Medium             4  \n",
       "2      Medium            14  \n",
       "3       Small            15  \n",
       "4        High            26  "
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = data\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(['Item_Identifier','Outlet_Establishment_Year','Outlet_Identifier'],axis =1,inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "      <th>Outlet_size</th>\n",
       "      <th>Outlet_Years</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Food</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "      <td>Medium</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "      <td>Medium</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Food</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "      <td>Medium</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Food</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "      <td>Small</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Non-Consumable</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "      <td>High</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "0           FDA15         9.30          Low Fat         0.016047   \n",
       "1           DRC01         5.92          Regular         0.019278   \n",
       "2           FDN15        17.50          Low Fat         0.016760   \n",
       "3           FDX07        19.20          Regular         0.000000   \n",
       "4           NCD19         8.93          Low Fat         0.000000   \n",
       "\n",
       "        Item_Type  Item_MRP Outlet_Identifier  Outlet_Establishment_Year  \\\n",
       "0            Food  249.8092            OUT049                       1999   \n",
       "1          Drinks   48.2692            OUT018                       2009   \n",
       "2            Food  141.6180            OUT049                       1999   \n",
       "3            Food  182.0950            OUT010                       1998   \n",
       "4  Non-Consumable   53.8614            OUT013                       1987   \n",
       "\n",
       "  Outlet_Size Outlet_Location_Type        Outlet_Type  Item_Outlet_Sales  \\\n",
       "0      Medium               Tier 1  Supermarket Type1          3735.1380   \n",
       "1      Medium               Tier 3  Supermarket Type2           443.4228   \n",
       "2      Medium               Tier 1  Supermarket Type1          2097.2700   \n",
       "3         NaN               Tier 3      Grocery Store           732.3800   \n",
       "4        High               Tier 3  Supermarket Type1           994.7052   \n",
       "\n",
       "  Outlet_size  Outlet_Years  \n",
       "0      Medium            14  \n",
       "1      Medium             4  \n",
       "2      Medium            14  \n",
       "3       Small            15  \n",
       "4        High            26  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\divanand\\Anaconda3\\lib\\site-packages\\sklearn\\cross_validation.py:41: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.\n",
      "  \"This module will be removed in 0.20.\", DeprecationWarning)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.cross_validation import train_test_split\n",
    "\n",
    "l_r = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df.drop('Item_Outlet_Sales',axis=1)\n",
    "y = df['Item_Outlet_Sales']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train ,x_test ,y_train ,y_test = train_test_split(x , y , test_size=0.30 , random_state = 20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5 entries, 0 to 4\n",
      "Data columns (total 14 columns):\n",
      "Item_Identifier              5 non-null object\n",
      "Item_Weight                  5 non-null float64\n",
      "Item_Fat_Content             5 non-null object\n",
      "Item_Visibility              5 non-null float64\n",
      "Item_Type                    5 non-null object\n",
      "Item_MRP                     5 non-null float64\n",
      "Outlet_Identifier            5 non-null object\n",
      "Outlet_Establishment_Year    5 non-null int64\n",
      "Outlet_Size                  4 non-null object\n",
      "Outlet_Location_Type         5 non-null object\n",
      "Outlet_Type                  5 non-null object\n",
      "Item_Outlet_Sales            5 non-null float64\n",
      "Outlet_size                  5 non-null object\n",
      "Outlet_Years                 5 non-null int64\n",
      "dtypes: float64(4), int64(2), object(8)\n",
      "memory usage: 640.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'l_r' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-5-c67b9aa4f84d>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0ml_r\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'l_r' is not defined"
     ]
    }
   ],
   "source": [
    "l_r.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'l_r' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-14-3c5e9b56f2fb>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0my_predicted\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0ml_r\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'l_r' is not defined"
     ]
    }
   ],
   "source": [
    "y_predicted = l_r.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'l_r' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-13-88612f1b8068>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0ml_r\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0my_test\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'l_r' is not defined"
     ]
    }
   ],
   "source": [
    "l_r.score(x_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "par={'n_estimators':[10,20,50,100,150,500]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "gbr=GradientBoostingRegressor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "gr=GridSearchCV(gbr,par)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'x_train' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-9-5f3d9ef8e847>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mgr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'x_train' is not defined"
     ]
    }
   ],
   "source": [
    "gr.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'GridSearchCV' object has no attribute 'best_params_'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-26-58212ac16074>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mgr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbest_params_\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m: 'GridSearchCV' object has no attribute 'best_params_'"
     ]
    }
   ],
   "source": [
    "gr.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "gbr=GradientBoostingRegressor(n_estimators=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'x_train' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-37-0781757add58>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mgbr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'x_train' is not defined"
     ]
    }
   ],
   "source": [
    "gbr.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "gbr_pred=gbr.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'x_test' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-36-689135bf0135>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mgbr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0my_test\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'x_test' is not defined"
     ]
    }
   ],
   "source": [
    "gbr.score(x_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
